{"version":3,"sources":["Components/ShowUrls.tsx","Components/TaskItem.tsx","Util.tsx","App.tsx","index.tsx"],"names":["ShowUrls","text","this","props","convertLinks","sanitizeHtml","allowedTags","allowedAttributes","allowedIframeDomains","replace","url","dangerouslySetInnerHTML","__html","React","Component","TaskItem","handleVisibleChange","visible","visibleConfirm","setState","showingConfirm","onDelete","markAsText","active","icon","CheckOutlined","CloseOutlined","title","onClick","onDone","style","backgroundColor","className","getDoneButton","onEdit","EditOutlined","ghost","okText","cancelText","onConfirm","placement","onVisibleChange","DeleteOutlined","danger","clickableLinks","UTIL","currentYear","Date","getFullYear","CREATED_YEAR","toString","Math","min","max","size","random","slice","Header","Layout","Content","Footer","App","state","newTaskText","settings","showConfirmDialog","showActiveTasksFirst","showCompleted","taskListEntries","handleMarkAllDone","bind","handleDeleteAllCompleted","handleInput","handleSubmit","handleShowConfirmChange","handleShowActiveFirst","handleShowCompletedTasks","handleClickableLinks","tasks","JSON","parse","localStorage","getItem","stringify","map","task","updateTasks","filter","event","currentTarget","value","push","UUID","now","randomHex","deletedElIdx","findIndex","el","splice","updatedElIdx","updateSettings","newTasks","setItem","newSettings","item","handleDelete","handleDone","handleEdit","onChangeMethod","checkedStateBind","onChange","checked","checkedChildren","unCheckedChildren","length","activeTaskCount","taskListItems","activeTasks","completedTasks","forEach","concat","createTaskListEntry","minHeight","color","padding","defaultActiveKey","type","TabPane","tab","HomeOutlined","disabled","finishedTaskCount","Search","placeholder","allowClear","enterButton","PlusOutlined","onSearch","width","SettingOutlined","createCustomSwitch","textAlign","fontWeight","getCopyrightDate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8cAQaA,EAAb,4JACI,WACI,IAAIC,EACJ,GAAIC,KAAKC,MAAMC,aAAc,CAOzBH,GALAA,EAAOI,IAAaH,KAAKC,MAAMF,KAAM,CACjCK,YAAa,GACbC,kBAAmB,GACnBC,qBAAsB,MAEdC,QANK,uGAMa,SAACC,GAE3B,MAAQ,6BAA0CA,EAAM,KAAOA,EAAM,eAIzET,EAAOC,KAAKC,MAAMF,KAEtB,OAAQ,sBAAMU,wBAAyB,CAACC,OAAQX,SAlBxD,GAA8BY,IAAMC,WCavBC,EAAb,4MAgBIC,oBAAsB,SAACC,GACdA,EAKD,EAAKd,MAAMe,eACX,EAAKC,SAAS,CAACC,eAAgBH,IAE/B,EAAKd,MAAMkB,WAPX,EAAKF,SAAS,CAACC,eAAgBH,KAlB3C,mDACI,WACI,IAAMK,EAAa,YAAepB,KAAKC,MAAMoB,OAAU,YAAc,UAC/DC,EAAOtB,KAAKC,MAAMoB,OAAS,cAACE,EAAA,EAAD,IAAmB,cAACC,EAAA,EAAD,IACpD,OACI,cAAC,IAAD,CAASC,MAAOL,EAAhB,SACI,cAAC,IAAD,CACIM,QAAS1B,KAAKC,MAAM0B,OACpBL,KAAMA,EACNM,MAAO,CAACC,gBAAiB,iBAT7C,oBA6BI,WACI,OACI,sBAAKC,UAAS,6BAAwB9B,KAAKC,MAAMoB,OAAS,GAAK,mBAA/D,UACI,sBAAKS,UAAU,iCAAf,UACK9B,KAAK+B,gBACN,cAAC,IAAD,CAASN,MAAM,YAAf,SACI,cAAC,IAAD,CACIC,QAAS1B,KAAKC,MAAM+B,OACpBV,KAAM,cAACW,EAAA,EAAD,IACNC,OAAK,MAGb,cAAC,IAAD,CACIT,MAAM,6CACNU,OAAO,MACPC,WAAW,MACXC,UAAWrC,KAAKC,MAAMkB,SACtBmB,UAAU,SACVC,gBAAiBvC,KAAKc,oBAN1B,SAQI,cAAC,IAAD,CACIQ,KAAM,cAACkB,EAAA,EAAD,IACNC,QAAM,SAIlB,qBAAKX,UAAU,YAAf,SACI,cAAC,EAAD,CAAU/B,KAAMC,KAAKC,MAAMF,KAAMG,aAAcF,KAAKC,MAAMyC,0BAxD9E,GAA8B/B,IAAMC,WCrBd+B,EAAtB,qGAMI,WACI,IAAMC,GAAc,IAAIC,MAAOC,cAC/B,OAAIF,IAAgB5C,KAAK+C,aAEd/C,KAAK+C,aAAaC,WAGnB,GAAN,OAAUC,KAAKC,IAAIN,EAAa5C,KAAK+C,cAArC,YAAsDE,KAAKE,IAAIP,EAAa5C,KAAK+C,iBAb7F,uBAiBI,WAAmD,IAA3BK,EAA0B,uDAAX,EACnC,OAAwB,SAAhBH,KAAKI,UAAqBL,SAAS,IAAIM,MAAM,EAAGF,OAlBhE,KAAsBT,EACHI,aAAe,K,mECO3BQ,EAA2BC,IAA3BD,OAAQE,EAAmBD,IAAnBC,QAASC,EAAUF,IAAVE,OAyTTC,E,kDAnSX,WAAY1D,GAAa,IAAD,8BACpB,cAAMA,IAED2D,MAAQ,CACTC,YAAa,GACbC,SAAU,CACNC,mBAAmB,EACnBC,sBAAsB,EACtBC,eAAe,EACfvB,gBAAgB,GAEpBwB,gBAAiB,IAGrB,EAAKC,kBAAoB,EAAKA,kBAAkBC,KAAvB,gBACzB,EAAKC,yBAA2B,EAAKA,yBAAyBD,KAA9B,gBAChC,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBACnB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,wBAA0B,EAAKA,wBAAwBJ,KAA7B,gBAC/B,EAAKK,sBAAwB,EAAKA,sBAAsBL,KAA3B,gBAC7B,EAAKM,yBAA2B,EAAKA,yBAAyBN,KAA9B,gBAChC,EAAKO,qBAAuB,EAAKA,qBAAqBP,KAA1B,gBArBR,E,qDA2BxB,WACI,IAAMQ,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAAYH,KAAKI,UAAU,KACnEnB,EAAWe,KAAKC,MAAMC,aAAaC,QAAQ,aAAeH,KAAKI,UAAU,CAAClB,mBAAmB,KACnG/D,KAAKiB,SAAS,CAACiD,gBAAiBU,EAAOd,SAAUA,M,+BAGrD,WACI,IAAMc,EAAQ5E,KAAK4D,MAAMM,gBAAgBgB,KAAI,SAACC,GAE1C,OADAA,EAAK9D,QAAS,EACP8D,KAEXnF,KAAKoF,YAAYR,K,sCAGrB,WACI,IAAMA,EAAQ5E,KAAK4D,MAAMM,gBAAgBmB,QAAO,SAACF,GAC7C,OAAOA,EAAK9D,UAEhBrB,KAAKoF,YAAYR,K,yBAGrB,SAAYU,GACRtF,KAAKiB,SAAS,CAAC4C,YAAayB,EAAMC,cAAcC,U,0BAGpD,WACI,IAAMZ,EAAQ5E,KAAK4D,MAAMM,gBAAgBZ,QACzBtD,KAAK4D,MAAMC,cAM3Be,EAAMa,KAAK,CACP1F,KAAMC,KAAK4D,MAAMC,YACjB6B,KAAM7C,KAAK8C,MAAM3C,WAAa,IAAML,EAAKiD,YACzCvE,QAAQ,IAGZrB,KAAKiB,SAAS,CACV4C,YAAa,KAEjB7D,KAAKoF,YAAYR,M,0BAGrB,SAAaO,GACT,IAAMP,EAAQ5E,KAAK4D,MAAMM,gBAAgBZ,QACnCuC,EAAejB,EAAMkB,WAAU,SAAAC,GAAE,OAAIZ,EAAKO,OAASK,EAAGL,QACxDG,GAAgB,IAChBjB,EAAMoB,OAAOH,EAAc,GAC3B7F,KAAKoF,YAAYR,M,wBAIzB,SAAWO,GACP,IAAMP,EAAQ5E,KAAK4D,MAAMM,gBAAgBZ,QACnCuC,EAAejB,EAAMkB,WAAU,SAAAC,GAAE,OAAIZ,EAAKO,OAASK,EAAGL,QACxDG,GAAgB,IAChBjB,EAAMoB,OAAOH,EAAc,GAC3B7F,KAAKiB,SAAS,CAAC4C,YAAasB,EAAKpF,OACjCC,KAAKoF,YAAYR,M,wBAIzB,SAAWO,GACP,IAAMP,EAAQ5E,KAAK4D,MAAMM,gBAAgBZ,QACnC2C,EAAerB,EAAMkB,WAAU,SAAAC,GAAE,OAAIZ,EAAKO,OAASK,EAAGL,QAC5Dd,EAAMqB,GAAN,2BAA0BrB,EAAMqB,IAAhC,IAA+C5E,QAASuD,EAAMqB,GAAc5E,SAC5ErB,KAAKoF,YAAYR,K,qCAGrB,SAAwBY,GACpB,IAAM1B,EAAW9D,KAAK4D,MAAME,SAC5BA,EAASC,kBAAoByB,EAC7BxF,KAAKkG,eAAepC,K,mCAGxB,SAAsB0B,GAClB,IAAM1B,EAAW9D,KAAK4D,MAAME,SAC5BA,EAASE,qBAAuBwB,EAChCxF,KAAKkG,eAAepC,K,sCAGxB,SAAyB0B,GACrB,IAAM1B,EAAW9D,KAAK4D,MAAME,SAC5BA,EAASG,cAAgBuB,EACzBxF,KAAKkG,eAAepC,K,kCAGxB,SAAqB0B,GACjB,IAAM1B,EAAW9D,KAAK4D,MAAME,SAC5BA,EAASpB,eAAiB8C,EAC1BxF,KAAKkG,eAAepC,K,yBAGxB,SAAYqC,GACRnG,KAAKiB,SAAS,CAACiD,gBAAiBiC,IAChCpB,aAAaqB,QAAQ,QAASvB,KAAKI,UAAUkB,M,4BAGjD,SAAeE,GACXrG,KAAKiB,SAAS,CACV6C,SAAUuC,IAEdtB,aAAaqB,QAAQ,WAAYvB,KAAKI,UAAUoB,M,iCAGpD,SAAoBC,GAA6C,IAAD,OACtDxC,EAAW9D,KAAK4D,MAAME,SAC5B,OAAQ,cAAC,EAAD,CAEJ/D,KAAMuG,EAAKvG,KACXsB,OAAQiF,EAAKjF,OACbqE,KAAMY,EAAKZ,KACXvE,SAAU,kBAAM,EAAKoF,aAAaD,IAClC3E,OAAQ,kBAAM,EAAK6E,WAAWF,IAC9BtE,OAAQ,kBAAM,EAAKyE,WAAWH,IAC9BtF,eAAgB8C,EAASC,kBACzBrB,eAAgBoB,EAASpB,gBARpB4D,EAAKZ,Q,gCAYlB,SAAmBgB,EAAqBC,GACpC,OACI,cAAC,IAAD,CACIC,SAAUF,EACVG,QAASF,EACTG,gBAAiB,cAACvF,EAAA,EAAD,IACjBwF,kBAAmB,cAACvF,EAAA,EAAD,Q,6BAK/B,WACI,OAAOxB,KAAK4D,MAAMM,gBAAgBmB,QAAO,SAACF,GACtC,OAAOA,EAAK9D,UACb2F,S,+BAGP,WACI,OAAO/D,KAAKE,IAAInD,KAAK4D,MAAMM,gBAAgB8C,OAAShH,KAAKiH,kBAAmB,K,oBAGhF,WAAwB,IAChBC,EADe,OAEnB,GAAIlH,KAAK4D,MAAMM,gBAAiB,CAC5B,IAAIU,EAAQ5E,KAAK4D,MAAMM,gBAEvB,GAAKlE,KAAK4D,MAAME,SAASG,eAIlB,GAAIjE,KAAK4D,MAAME,SAASE,qBAAsB,CACjD,IAAImD,EAA8B,GAAIC,EAAiC,GACvExC,EAAMyC,SAAQ,SAAAlC,GACVA,EAAK9D,OAAS8F,EAAY1B,KAAKN,GAAQiC,EAAe3B,KAAKN,MAG/DP,EAAQuC,EAAYG,OAAOF,SAT3BxC,EAAQA,EAAMS,QAAO,SAAAF,GACjB,OAAOA,EAAK9D,UAWpB6F,EAAgBtC,EAAMM,KAAI,SAACoB,GACvB,OAAO,EAAKiB,oBAAoBjB,MAIxC,OACI,eAAC,IAAD,CAAQ1E,MAAO,CACX4F,UAAW,SADf,UAGI,cAACjE,EAAD,CAAQ3B,MAAO,CAAC6F,MAAO,SAAvB,wBACA,cAAChE,EAAD,CAAS7B,MAAO,CAAC8F,QAAS,UAA1B,SACI,qBAAK5F,UAAU,iBAAf,SACI,eAAC,IAAD,CAAM6F,iBAAiB,IAAIC,KAAK,OAAhC,UACI,eAAC,IAAKC,QAAN,CAAcC,IAAK,iCAAM,cAACC,EAAA,EAAD,IAAN,WAAnB,UACI,sBAAKjG,UAAU,eAAf,UACI,cAAC,IAAD,CACIJ,QAAS1B,KAAKmE,kBACd6D,UAAWhI,KAAKiH,kBAFpB,mCAMA,cAAC,IAAD,CACIxF,MAAM,uCACNU,OAAO,MACPC,WAAW,MACXC,UAAWrC,KAAKqE,yBAChB/B,UAAU,SACV0F,UAAWhI,KAAKiI,oBANpB,SAQI,cAAC,IAAD,CACIxF,QAAM,EACNuF,UAAWhI,KAAKiI,oBAFpB,wCAMR,qBAAKnG,UAAU,kBAAf,SACI,cAACoG,EAAA,EAAD,CACIC,YAAY,oBACZC,YAAU,EACVC,YAAa,cAACC,EAAA,EAAD,IACb9C,MAAOxF,KAAK4D,MAAMC,YAClB0E,SAAUvI,KAAKuE,aACfqC,SAAU5G,KAAKsE,YACf1C,MAAO,CAAC4G,MAAO,SAGvB,qBAAK1G,UAAU,qBAAf,SACKoF,MAlCiD,KAqC1D,eAAC,IAAKW,QAAN,CAAcC,IAAK,iCAAM,cAACW,EAAA,EAAD,IAAN,cAAnB,UACI,sFACA,wBAAO3G,UAAU,WAAjB,UACI,gCACA,+BACI,6CACA,6CAGJ,kCACA,+BACI,mEACA,6BACK9B,KAAK0I,mBAAmB1I,KAAKwE,wBAAyBxE,KAAK4D,MAAME,SAASC,wBAGnF,+BACI,yDACA,6BACK/D,KAAK0I,mBAAmB1I,KAAKyE,sBAAuBzE,KAAK4D,MAAME,SAASE,2BAGjF,+BACI,sDACA,6BACKhE,KAAK0I,mBAAmB1I,KAAK0E,yBAA0B1E,KAAK4D,MAAME,SAASG,oBAGpF,+BACI,qDACA,6BACKjE,KAAK0I,mBAAmB1I,KAAK2E,qBAAsB3E,KAAK4D,MAAME,SAASpB,6BA/BxB,YAyC5E,eAACgB,EAAD,CAAQ9B,MAAO,CACX+G,UAAW,SACXC,WAAY,UACZlB,QAAS,GAHb,kBAKY/E,EAAKkG,mBALjB,yB,GAxRElI,IAAMC,WCtBxBkI,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.87305c1c.chunk.js","sourcesContent":["import React, {ReactElement} from \"react\";\nimport sanitizeHtml from 'sanitize-html';\n\ntype ShowUrlsProps = {\n    text: string;\n    convertLinks: boolean;\n}\n\nexport class ShowUrls extends React.Component<ShowUrlsProps> {\n    render(): ReactElement {\n        let text;\n        if (this.props.convertLinks) {\n            const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/;\n            text = sanitizeHtml(this.props.text, {\n                allowedTags: [],\n                allowedAttributes: {},\n                allowedIframeDomains: [],\n            });\n            text = text.replace(urlRegex, (url: string) => {\n                const handler = process.env.REACT_APP_REDIRECT_DAEMON_URL || '';\n                return ('<a target=\\'_blank\\' href=\"' + handler + url + '\">' + url + '</a>');\n            });\n\n        } else {\n            text = this.props.text;\n        }\n        return (<span dangerouslySetInnerHTML={{__html: text}}/>);\n    }\n}\n","import React, {ReactElement} from \"react\";\nimport './TaskItem.css'\nimport {Button, Popconfirm, Tooltip} from \"antd\";\nimport {CheckOutlined, CloseOutlined, DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {ShowUrls} from \"./ShowUrls\";\n\ntype TaskItemState = {\n    showingConfirm: boolean,\n}\n\nexport type TaskItemProps = {\n    text: string;\n    active: boolean;\n    UUID: string;\n    onDone: any;\n    onEdit: any;\n    onDelete: any;\n    visibleConfirm: boolean;\n    clickableLinks: boolean;\n}\n\nexport class TaskItem extends React.Component<TaskItemProps, TaskItemState> {\n    getDoneButton(): ReactElement<typeof Tooltip> {\n        const markAsText = 'Mark as ' + ((this.props.active) ? 'completed' : 'active');\n        const icon = this.props.active ? <CheckOutlined/> : <CloseOutlined/>;\n        return (\n            <Tooltip title={markAsText}>\n                <Button\n                    onClick={this.props.onDone}\n                    icon={icon}\n                    style={{backgroundColor: '#70C040'}}\n                />\n            </Tooltip>\n        )\n    }\n\n    /// source: https://codesandbox.io/s/v3yo8\n    handleVisibleChange = (visible: boolean): void => {\n        if (!visible) {\n            this.setState({showingConfirm: visible});\n            return;\n        }\n\n        if (this.props.visibleConfirm) {\n            this.setState({showingConfirm: visible});\n        } else {\n            this.props.onDelete();\n        }\n    }\n\n    render(): ReactElement {\n        return (\n            <div className={`TaskItem-container ${this.props.active ? '' : 'TaskItem-dimmed'}`}>\n                <div className=\"TaskItem-controls button-group\">\n                    {this.getDoneButton()}\n                    <Tooltip title=\"Edit task\">\n                        <Button\n                            onClick={this.props.onEdit}\n                            icon={<EditOutlined/>}\n                            ghost\n                        />\n                    </Tooltip>\n                    <Popconfirm\n                        title=\"Are you sure you want to delete this task?\"\n                        okText=\"Yes\"\n                        cancelText=\"Nah\"\n                        onConfirm={this.props.onDelete}\n                        placement=\"bottom\"\n                        onVisibleChange={this.handleVisibleChange}\n                    >\n                        <Button\n                            icon={<DeleteOutlined/>}\n                            danger\n                        />\n                    </Popconfirm>\n                </div>\n                <div className=\"Task-text\">\n                    <ShowUrls text={this.props.text} convertLinks={this.props.clickableLinks}/>\n                </div>\n            </div>\n        )\n    }\n}\n","export abstract class UTIL {\n    private static CREATED_YEAR = 2021;\n\n    /**\n     * Get the copyright date for the application\n     */\n    public static getCopyrightDate(): string {\n        const currentYear = new Date().getFullYear();\n        if (currentYear === this.CREATED_YEAR) {\n            /// if we are in the same year as the app was created, it will simply will just return that year\n            return this.CREATED_YEAR.toString();\n        } else {\n            /// otherwise a year interval\n            return `${Math.min(currentYear, this.CREATED_YEAR)}-${Math.max(currentYear, this.CREATED_YEAR)}`\n        }\n    }\n\n    public static randomHex(size: number = 6): string {\n        return (Math.random() * 0xffffff).toString(16).slice(0, size);\n    }\n}\n","import React, {ReactElement} from 'react';\nimport './App.css';\nimport {TaskItem} from \"./Components/TaskItem\";\nimport {UTIL} from \"./Util\";\nimport {Button, Layout, Popconfirm, Switch, Tabs} from \"antd\";\nimport Search from \"antd/es/input/Search\";\nimport {CheckOutlined, CloseOutlined, HomeOutlined, PlusOutlined, SettingOutlined} from \"@ant-design/icons\";\n\nconst {Header, Content, Footer} = Layout;\n\ntype Settings = {\n    showConfirmDialog: boolean;\n    showActiveTasksFirst: boolean;\n    showCompleted: boolean;\n    clickableLinks: boolean;\n}\n\ntype TaskItemData = {\n    text: string;\n    UUID: string;\n    active: boolean;\n}\n\ntype AppState = {\n    newTaskText: string;\n    taskListEntries: TaskItemData[];\n    settings: Settings;\n}\n\nclass App extends React.Component<any, AppState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            newTaskText: '',\n            settings: {\n                showConfirmDialog: true,\n                showActiveTasksFirst: false,\n                showCompleted: true,\n                clickableLinks: true,\n            },\n            taskListEntries: []\n        };\n\n        this.handleMarkAllDone = this.handleMarkAllDone.bind(this);\n        this.handleDeleteAllCompleted = this.handleDeleteAllCompleted.bind(this);\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleShowConfirmChange = this.handleShowConfirmChange.bind(this);\n        this.handleShowActiveFirst = this.handleShowActiveFirst.bind(this);\n        this.handleShowCompletedTasks = this.handleShowCompletedTasks.bind(this);\n        this.handleClickableLinks = this.handleClickableLinks.bind(this);\n    }\n\n    /**\n     * Load data\n     */\n    componentDidMount(): void {\n        const tasks = JSON.parse(localStorage.getItem('tasks') || JSON.stringify([]));\n        const settings = JSON.parse(localStorage.getItem('settings') || JSON.stringify({showConfirmDialog: true}));\n        this.setState({taskListEntries: tasks, settings: settings});\n    }\n\n    handleMarkAllDone(): void {\n        const tasks = this.state.taskListEntries.map((task: TaskItemData) => {\n            task.active = false;\n            return task;\n        });\n        this.updateTasks(tasks);\n    }\n\n    handleDeleteAllCompleted(): void {\n        const tasks = this.state.taskListEntries.filter((task: TaskItemData) => {\n            return task.active;\n        })\n        this.updateTasks(tasks);\n    }\n\n    handleInput(event: React.FormEvent<HTMLInputElement>): void {\n        this.setState({newTaskText: event.currentTarget.value});\n    }\n\n    handleSubmit(): void {\n        const tasks = this.state.taskListEntries.slice();\n        const newTask = this.state.newTaskText;\n\n        if (!newTask) {\n            return;\n        }\n\n        tasks.push({\n            text: this.state.newTaskText,\n            UUID: Date.now().toString() + '_' + UTIL.randomHex(),\n            active: true,\n        });\n\n        this.setState({\n            newTaskText: '',\n        });\n        this.updateTasks(tasks);\n    }\n\n    handleDelete(task: TaskItemData): void {\n        const tasks = this.state.taskListEntries.slice();\n        const deletedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        if (deletedElIdx >= 0) {\n            tasks.splice(deletedElIdx, 1);\n            this.updateTasks(tasks);\n        }\n    }\n\n    handleEdit(task: TaskItemData): void {\n        const tasks = this.state.taskListEntries.slice();\n        const deletedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        if (deletedElIdx >= 0) {\n            tasks.splice(deletedElIdx, 1);\n            this.setState({newTaskText: task.text});\n            this.updateTasks(tasks);\n        }\n    }\n\n    handleDone(task: TaskItemData): void {\n        const tasks = this.state.taskListEntries.slice();\n        const updatedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        tasks[updatedElIdx] = {...tasks[updatedElIdx], active: !tasks[updatedElIdx].active};\n        this.updateTasks(tasks);\n    }\n\n    handleShowConfirmChange(value: boolean): void {\n        const settings = this.state.settings;\n        settings.showConfirmDialog = value;\n        this.updateSettings(settings);\n    }\n\n    handleShowActiveFirst(value: boolean): void {\n        const settings = this.state.settings;\n        settings.showActiveTasksFirst = value;\n        this.updateSettings(settings);\n    }\n\n    handleShowCompletedTasks(value: boolean): void {\n        const settings = this.state.settings;\n        settings.showCompleted = value;\n        this.updateSettings(settings);\n    }\n\n    handleClickableLinks(value: boolean): void {\n        const settings = this.state.settings;\n        settings.clickableLinks = value;\n        this.updateSettings(settings);\n    }\n\n    updateTasks(newTasks: TaskItemData[]): void {\n        this.setState({taskListEntries: newTasks});\n        localStorage.setItem('tasks', JSON.stringify(newTasks));\n    }\n\n    updateSettings(newSettings: Settings): void {\n        this.setState({\n            settings: newSettings\n        });\n        localStorage.setItem('settings', JSON.stringify(newSettings));\n    }\n\n    createTaskListEntry(item: TaskItemData): ReactElement<TaskItem> {\n        const settings = this.state.settings;\n        return (<TaskItem\n            key={item.UUID}\n            text={item.text}\n            active={item.active}\n            UUID={item.UUID}\n            onDelete={() => this.handleDelete(item)}\n            onDone={() => this.handleDone(item)}\n            onEdit={() => this.handleEdit(item)}\n            visibleConfirm={settings.showConfirmDialog}\n            clickableLinks={settings.clickableLinks}\n        />);\n    }\n\n    createCustomSwitch(onChangeMethod: any, checkedStateBind: boolean): ReactElement<typeof Switch> {\n        return (\n            <Switch\n                onChange={onChangeMethod}\n                checked={checkedStateBind}\n                checkedChildren={<CheckOutlined/>}\n                unCheckedChildren={<CloseOutlined/>}\n            />\n        );\n    }\n\n    activeTaskCount(): number {\n        return this.state.taskListEntries.filter((task: TaskItemData) => {\n            return task.active;\n        }).length;\n    }\n\n    finishedTaskCount(): number {\n        return Math.max(this.state.taskListEntries.length - this.activeTaskCount(), 0);\n    }\n\n    render(): ReactElement {\n        let taskListItems;\n        if (this.state.taskListEntries) {\n            let tasks = this.state.taskListEntries;\n\n            if (!this.state.settings.showCompleted) {\n                tasks = tasks.filter(task => {\n                    return task.active;\n                });\n            } else if (this.state.settings.showActiveTasksFirst) {\n                let activeTasks: TaskItemData[] = [], completedTasks: TaskItemData[] = [];\n                tasks.forEach(task => {\n                    task.active ? activeTasks.push(task) : completedTasks.push(task);\n                });\n\n                tasks = activeTasks.concat(completedTasks);\n            }\n\n            taskListItems = tasks.map((item: TaskItemData) => {\n                return this.createTaskListEntry(item);\n            });\n        }\n\n        return (\n            <Layout style={{\n                minHeight: '100vh',\n            }}>\n                <Header style={{color: 'white'}}>JobTracker</Header>\n                <Content style={{padding: '0 25px'}}>\n                    <div className=\"layout-content\">\n                        <Tabs defaultActiveKey=\"1\" type=\"card\">\n                            <Tabs.TabPane tab={<span><HomeOutlined/> Home</span>} key=\"1\">\n                                <div className=\"button-group\">\n                                    <Button\n                                        onClick={this.handleMarkAllDone}\n                                        disabled={!this.activeTaskCount()}\n                                    >\n                                        Mark all as completed\n                                    </Button>\n                                    <Popconfirm\n                                        title=\"Are you sure? This cannot be undone.\"\n                                        okText=\"Yes\"\n                                        cancelText=\"Nah\"\n                                        onConfirm={this.handleDeleteAllCompleted}\n                                        placement=\"bottom\"\n                                        disabled={!this.finishedTaskCount()}\n                                    >\n                                        <Button\n                                            danger\n                                            disabled={!this.finishedTaskCount()}\n                                        >Clear completed tasks</Button>\n                                    </Popconfirm>\n                                </div>\n                                <div className=\"input-container\">\n                                    <Search\n                                        placeholder=\"Type task here...\"\n                                        allowClear\n                                        enterButton={<PlusOutlined/>}\n                                        value={this.state.newTaskText}\n                                        onSearch={this.handleSubmit}\n                                        onChange={this.handleInput}\n                                        style={{width: 400}}\n                                    />\n                                </div>\n                                <div className=\"App-task-container\">\n                                    {taskListItems}\n                                </div>\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab={<span><SettingOutlined/>Settings</span>} key=\"2\">\n                                <h3>Here you can change the behaviour of the application</h3>\n                                <table className=\"settings\">\n                                    <thead>\n                                    <tr>\n                                        <th>Action name</th>\n                                        <th>Status</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    <tr>\n                                        <td>Show confirm dialog when deleting</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleShowConfirmChange, this.state.settings.showConfirmDialog)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Show active tasks first</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleShowActiveFirst, this.state.settings.showActiveTasksFirst)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Show completed tasks</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleShowCompletedTasks, this.state.settings.showCompleted)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Make URLs clickable</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleClickableLinks, this.state.settings.clickableLinks)}\n                                        </td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n\n                </Content>\n                <Footer style={{\n                    textAlign: 'center',\n                    fontWeight: 'lighter',\n                    padding: 5,\n                }}>\n                    &copy; {UTIL.getCopyrightDate()} | hubatruck\n                </Footer>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.dark.css'\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}