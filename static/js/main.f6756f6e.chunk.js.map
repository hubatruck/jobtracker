{"version":3,"sources":["Components/ShowUrls.tsx","Components/TaskItem.tsx","Util.tsx","App.tsx","index.tsx"],"names":["ShowUrls","text","this","props","convertLinks","sanitizeHtml","allowedTags","allowedAttributes","allowedIframeDomains","replace","url","dangerouslySetInnerHTML","__html","React","Component","TaskItem","handleVisibleChange","visible","visibleConfirm","setState","showingConfirm","onDelete","markAsText","done","icon","CloseOutlined","CheckOutlined","title","onClick","onDone","style","backgroundColor","className","getDoneButton","onEdit","EditOutlined","ghost","okText","cancelText","onConfirm","placement","onVisibleChange","DeleteOutlined","danger","clickableLinks","UTIL","currentYear","Date","getFullYear","CREATED_YEAR","toString","Math","min","max","size","random","slice","Header","Layout","Content","Footer","App","state","newTaskText","settings","showConfirmDialog","showActiveTasksFirst","hideDone","taskListEntries","handleInput","bind","handleSubmit","handleShowConfirmChange","handleShowActiveFirst","handleHideDoneTasks","handleClickableLinks","tasks","JSON","parse","localStorage","getItem","stringify","event","currentTarget","value","push","UUID","now","randomHex","updateTasks","task","deletedElIdx","findIndex","el","splice","updatedElIdx","newTasks","setItem","updateSettings","newSettings","item","handleDelete","handleDone","handleEdit","onChangeMethod","checkedStateBind","onChange","checked","checkedChildren","unCheckedChildren","taskListItems","filter","activeTasks","doneTasks","forEach","concat","map","createTaskListEntry","minHeight","color","padding","defaultActiveKey","type","TabPane","tab","HomeOutlined","Search","placeholder","allowClear","enterButton","PlusOutlined","onSearch","width","SettingOutlined","createCustomSwitch","textAlign","fontWeight","getCopyrightDate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f6756f6e.chunk.js","sourcesContent":["import React from \"react\";\nimport sanitizeHtml from 'sanitize-html';\n\ntype ShowUrlsProps = {\n    text: string;\n    convertLinks: boolean;\n}\n\nexport class ShowUrls extends React.Component<ShowUrlsProps> {\n    render() {\n        let text;\n        if (this.props.convertLinks) {\n            const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/;\n            text = sanitizeHtml(this.props.text, {\n                allowedTags: [],\n                allowedAttributes: {},\n                allowedIframeDomains: [],\n            });\n            text = text.replace(urlRegex, (url: string) => {\n                const handler = process.env.REACT_APP_REDIRECT_DAEMON_URL || '';\n                return ('<a target=\\'_blank\\' href=\"' + handler + url + '\">' + url + '</a>');\n            });\n\n        } else {\n            text = this.props.text;\n        }\n        return (<span dangerouslySetInnerHTML={{__html: text}}/>);\n    }\n}\n","import React from \"react\";\nimport './TaskItem.css'\nimport {Button, Popconfirm, Tooltip} from \"antd\";\nimport {CheckOutlined, CloseOutlined, DeleteOutlined, EditOutlined} from \"@ant-design/icons\";\nimport {ShowUrls} from \"./ShowUrls\";\n\ntype TaskItemState = {\n    showingConfirm: boolean,\n}\n\nexport type TaskItemProps = {\n    text: string;\n    done: boolean;\n    UUID: string;\n    onDone: any;\n    onEdit: any;\n    onDelete: any;\n    visibleConfirm: boolean;\n    clickableLinks: boolean;\n}\n\nexport class TaskItem extends React.Component<TaskItemProps, TaskItemState> {\n    getDoneButton() {\n        const markAsText = 'Mark as ' + ((this.props.done) ? 'active' : 'done');\n        const icon = this.props.done ? <CloseOutlined/> : <CheckOutlined/>;\n        return (\n            <Tooltip title={markAsText}>\n                <Button\n                    onClick={this.props.onDone}\n                    icon={icon}\n                    style={{backgroundColor: '#70C040'}}\n                />\n            </Tooltip>\n        )\n    }\n\n    /// source: https://codesandbox.io/s/v3yo8\n    handleVisibleChange = (visible: boolean) => {\n        if (!visible) {\n            this.setState({showingConfirm: visible});\n            return;\n        }\n\n        if (this.props.visibleConfirm) {\n            this.setState({showingConfirm: visible});\n        } else {\n            this.props.onDelete();\n        }\n    }\n\n    render() {\n        return (\n            <div className={`TaskItem-container ${this.props.done ? 'TaskItem-dimmed' : ''}`}>\n                <div className=\"TaskItem-controls\">\n                    {this.getDoneButton()}\n                    <Tooltip title=\"Edit task\">\n                        <Button\n                            onClick={this.props.onEdit}\n                            icon={<EditOutlined/>}\n                            ghost\n                        />\n                    </Tooltip>\n                    <Popconfirm\n                        title=\"Are you sure you want to delete this task?\"\n                        okText=\"Yes\"\n                        cancelText=\"Nah\"\n                        onConfirm={this.props.onDelete}\n                        placement=\"bottom\"\n                        onVisibleChange={this.handleVisibleChange}\n                    >\n                        <Button\n                            icon={<DeleteOutlined/>}\n                            danger\n                        />\n                    </Popconfirm>\n                </div>\n                <div className=\"Task-text\">\n                    <ShowUrls text={this.props.text} convertLinks={this.props.clickableLinks}/>\n                </div>\n            </div>\n        )\n    }\n}\n","export abstract class UTIL {\n    private static CREATED_YEAR = 2021;\n\n    /**\n     * Get the copyright date for the application\n     */\n    public static getCopyrightDate(): string {\n        const currentYear = new Date().getFullYear();\n        if (currentYear === this.CREATED_YEAR) {\n            /// if we are in the same year as the app was created, it will simply will just return that year\n            return this.CREATED_YEAR.toString();\n        } else {\n            /// otherwise a year interval\n            return `${Math.min(currentYear, this.CREATED_YEAR)}-${Math.max(currentYear, this.CREATED_YEAR)}`\n        }\n    }\n\n    public static randomHex(size: number = 6): string {\n        return (Math.random() * 0xffffff).toString(16).slice(0, size);\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport {TaskItem} from \"./Components/TaskItem\";\nimport {UTIL} from \"./Util\";\nimport {Layout, Switch, Tabs} from \"antd\";\nimport Search from \"antd/es/input/Search\";\nimport {CheckOutlined, CloseOutlined, HomeOutlined, PlusOutlined, SettingOutlined} from \"@ant-design/icons\";\n\nconst {Header, Content, Footer} = Layout;\n\ntype Settings = {\n    showConfirmDialog: boolean;\n    showActiveTasksFirst: boolean;\n    hideDone: boolean;\n    clickableLinks: boolean;\n}\n\ntype TaskItemData = {\n    text: string;\n    UUID: string;\n    done: boolean;\n}\n\ntype AppState = {\n    newTaskText: string;\n    taskListEntries: TaskItemData[];\n    settings: Settings;\n}\n\nclass App extends React.Component<any, AppState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            newTaskText: '',\n            settings: {\n                showConfirmDialog: true,\n                showActiveTasksFirst: false,\n                hideDone: false,\n                clickableLinks: true,\n            },\n            taskListEntries: []\n        };\n\n        this.handleInput = this.handleInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        this.handleShowConfirmChange = this.handleShowConfirmChange.bind(this);\n        this.handleShowActiveFirst = this.handleShowActiveFirst.bind(this);\n        this.handleHideDoneTasks = this.handleHideDoneTasks.bind(this);\n        this.handleClickableLinks = this.handleClickableLinks.bind(this);\n    }\n\n    /**\n     * Load data\n     */\n    componentDidMount() {\n        const tasks = JSON.parse(localStorage.getItem('tasks') || JSON.stringify([]));\n        const settings = JSON.parse(localStorage.getItem('settings') || JSON.stringify({showConfirmDialog: true}));\n        this.setState({taskListEntries: tasks, settings: settings});\n    }\n\n    handleInput(event: React.FormEvent<HTMLInputElement>) {\n        this.setState({newTaskText: event.currentTarget.value});\n    }\n\n    handleSubmit() {\n        const tasks = this.state.taskListEntries.slice();\n        const newTask = this.state.newTaskText;\n\n        if (!newTask) {\n            return;\n        }\n\n        tasks.push({\n            text: this.state.newTaskText,\n            UUID: Date.now().toString() + '_' + UTIL.randomHex(),\n            done: false,\n        });\n\n        this.setState({\n            newTaskText: '',\n        });\n        this.updateTasks(tasks);\n    }\n\n    handleDelete(task: TaskItemData) {\n        const tasks = this.state.taskListEntries.slice();\n        const deletedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        if (deletedElIdx >= 0) {\n            tasks.splice(deletedElIdx, 1);\n            this.updateTasks(tasks);\n        }\n    }\n\n    handleEdit(task: TaskItemData) {\n        const tasks = this.state.taskListEntries.slice();\n        const deletedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        if (deletedElIdx >= 0) {\n            tasks.splice(deletedElIdx, 1);\n            this.setState({newTaskText: task.text});\n            this.updateTasks(tasks);\n        }\n    }\n\n    handleDone(task: TaskItemData) {\n        const tasks = this.state.taskListEntries.slice();\n        const updatedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        tasks[updatedElIdx] = {...tasks[updatedElIdx], done: !tasks[updatedElIdx].done};\n        this.updateTasks(tasks);\n    }\n\n    updateTasks(newTasks: TaskItemData[]) {\n        this.setState({taskListEntries: newTasks});\n        localStorage.setItem('tasks', JSON.stringify(newTasks));\n    }\n\n    handleShowConfirmChange(value: boolean) {\n        const settings = this.state.settings;\n        settings.showConfirmDialog = value;\n        this.updateSettings(settings);\n    }\n\n    handleShowActiveFirst(value: boolean) {\n        const settings = this.state.settings;\n        settings.showActiveTasksFirst = value;\n        this.updateSettings(settings);\n    }\n\n    handleHideDoneTasks(value: boolean) {\n        const settings = this.state.settings;\n        settings.hideDone = value;\n        this.updateSettings(settings);\n    }\n\n    handleClickableLinks(value: boolean) {\n        const settings = this.state.settings;\n        settings.clickableLinks = value;\n        this.updateSettings(settings);\n    }\n\n    updateSettings(newSettings: Settings) {\n        this.setState({\n            settings: newSettings\n        });\n        localStorage.setItem('settings', JSON.stringify(newSettings));\n    }\n\n    createTaskListEntry(item: TaskItemData) {\n        const settings = this.state.settings;\n        return (<TaskItem key={item.UUID}\n                          text={item.text}\n                          done={item.done}\n                          UUID={item.UUID}\n                          onDelete={() => this.handleDelete(item)}\n                          onDone={() => this.handleDone(item)}\n                          onEdit={() => this.handleEdit(item)}\n                          visibleConfirm={settings.showConfirmDialog}\n                          clickableLinks={settings.clickableLinks}\n        />);\n    }\n\n    createCustomSwitch(onChangeMethod: any, checkedStateBind: boolean) {\n        return (\n            <Switch\n                onChange={onChangeMethod}\n                checked={checkedStateBind}\n                checkedChildren={<CheckOutlined/>}\n                unCheckedChildren={<CloseOutlined/>}\n            />\n        );\n    }\n\n    render() {\n        let taskListItems;\n        if (this.state.taskListEntries) {\n            let tasks = this.state.taskListEntries;\n\n            if (this.state.settings.hideDone) {\n                tasks = tasks.filter(task => {\n                    return !task.done;\n                });\n            } else if (this.state.settings.showActiveTasksFirst) {\n                let activeTasks: TaskItemData[] = [], doneTasks: TaskItemData[] = [];\n                tasks.forEach(task => {\n                    if (task.done) {\n                        doneTasks.push(task);\n                    } else {\n                        activeTasks.push(task);\n                    }\n                });\n\n                tasks = activeTasks.concat(doneTasks);\n            }\n\n            taskListItems = tasks.map((item: TaskItemData) => {\n                return this.createTaskListEntry(item);\n            });\n        }\n\n        return (\n            <Layout style={{\n                minHeight: '100vh',\n            }}>\n                <Header style={{color: 'white'}}>JobTracker</Header>\n                <Content style={{padding: '0 25px'}}>\n                    <div className=\"layout-content\">\n                        <Tabs defaultActiveKey=\"1\" type=\"card\">\n                            <Tabs.TabPane tab={<span><HomeOutlined/> Home</span>} key=\"1\">\n                                <div className=\"input-container\">\n                                    <Search\n                                        placeholder=\"Type task here...\"\n                                        allowClear\n                                        enterButton={<PlusOutlined/>}\n                                        value={this.state.newTaskText}\n                                        onSearch={this.handleSubmit}\n                                        onChange={this.handleInput}\n                                        style={{width: 400}}\n                                    />\n                                </div>\n                                <div className=\"App-task-container\">\n                                    {taskListItems}\n                                </div>\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab={<span><SettingOutlined/>Settings</span>} key=\"2\">\n                                <h3>Here you can change the behaviour of the application</h3>\n                                <table className=\"settings\">\n                                    <thead>\n                                    <tr>\n                                        <th> Action name</th>\n                                        <th>Status</th>\n                                    </tr>\n                                    </thead>\n                                    <tbody>\n                                    <tr>\n                                        <td>Show confirm dialog when deleting</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleShowConfirmChange, this.state.settings.showConfirmDialog)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Show active tasks first</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleShowActiveFirst, this.state.settings.showActiveTasksFirst)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Hide completed tasks</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleHideDoneTasks, this.state.settings.hideDone)}\n                                        </td>\n                                    </tr>\n                                    <tr>\n                                        <td>Make URLs clickable</td>\n                                        <td>\n                                            {this.createCustomSwitch(this.handleClickableLinks, this.state.settings.clickableLinks)}\n                                        </td>\n                                    </tr>\n                                    </tbody>\n                                </table>\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </div>\n\n                </Content>\n                <Footer style={{\n                    textAlign: 'center',\n                    fontWeight: 'lighter',\n                    padding: 5,\n                }}\n                >\n                    &copy; {UTIL.getCopyrightDate()} | hubatruck\n                </Footer>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.dark.css'\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}