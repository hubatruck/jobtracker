{"version":3,"sources":["Components/ShowUrls.tsx","Components/TaskItem.tsx","Util.tsx","Components/WidthLimitedContainer.tsx","Components/TaskInput.tsx","Pages/SettingsPage.tsx","App.tsx","index.tsx"],"names":["ShowUrls","text","this","props","convertLinks","sanitizeHtml","allowedTags","allowedAttributes","allowedIframeDomains","replace","url","style","whiteSpace","dangerouslySetInnerHTML","__html","React","Component","TaskItem","handleVisibleChange","visible","visibleConfirm","setState","showingConfirm","onDelete","markAsText","active","icon","CheckOutlined","CloseOutlined","title","onClick","onDone","backgroundColor","className","getDoneButton","onEdit","EditOutlined","ghost","okText","cancelText","onConfirm","placement","onVisibleChange","DeleteOutlined","danger","clickableLinks","UTIL","currentYear","Date","getFullYear","CREATED_YEAR","toString","Math","min","max","size","random","slice","defaults","maxWidth","centered","WidthLimitedContainer","state","margin","children","TaskInput","Form","useForm","form","initialValue","setTimeout","setFieldsValue","taskName","name","preserve","onFinish","data","clearOnSubmit","resetFields","onSubmit","Item","TextArea","placeholder","allowClear","width","autoSize","minRows","showCount","maxLength","onPressEnter","event","ctrlKey","shiftKey","submit","type","htmlType","PlusOutlined","marginTop","SettingsPage","settings","settingName","Object","keys","filter","key","length","Error","onChange","value","updateSettings","checked","checkedChildren","unCheckedChildren","createCustomSwitch","itemName","itemValue","onSettingUpdate","Header","Layout","Content","Footer","defaultSettings","showConfirmDialog","showActiveTasksFirst","showCompleted","App","taskInputValue","JSON","parse","localStorage","getItem","stringify","taskListEntries","message","config","maxCount","duration","tasks","map","task","updateTasks","info","then","submittedValues","newTask","push","UUID","now","randomHex","success","deletedElIdx","findIndex","el","splice","scrollIntoView","document","body","querySelector","behavior","scrollMode","fromTopX","window","scrollX","fromTopY","scrollY","updatedElIdx","scrollTo","newTasks","callback","setItem","newSettings","item","handleDelete","handleDone","handleEdit","activeTaskCount","taskListItems","activeTasks","completedTasks","forEach","concat","createTaskListEntry","minHeight","color","defaultActiveKey","TabPane","tab","HomeOutlined","handleSubmit","bind","handleMarkAllDone","disabled","ThunderboltOutlined","handleDeleteAllCompleted","finishedTaskCount","ClearOutlined","SettingOutlined","textAlign","fontWeight","padding","getCopyrightDate","target","rel","href","process","version","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.2a26500c.chunk.js","sourcesContent":["import React, {ReactElement} from 'react';\nimport sanitizeHtml from 'sanitize-html';\n\ntype ShowUrlsProps = {\n    text: string;\n    convertLinks: boolean;\n}\n\nexport class ShowUrls extends React.Component<ShowUrlsProps> {\n    render(): ReactElement {\n        let text;\n        if (this.props.convertLinks) {\n            const urlRegex = /https?:\\/\\/(www\\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\\.[a-zA-Z0-9()]{1,6}\\b([-a-zA-Z0-9()!@:%_+.~#?&/=]*)/;\n            text = sanitizeHtml(this.props.text, {\n                allowedTags: [],\n                allowedAttributes: {},\n                allowedIframeDomains: [],\n            });\n            text = text.replace(urlRegex, (url: string) => {\n                const handler = process.env.REACT_APP_REDIRECT_DAEMON_URL || '';\n                return ('<a target=\\'_blank\\' href=\"' + handler + url + '\">' + url + '</a>');\n            });\n\n        } else {\n            text = this.props.text;\n        }\n        return (<span style={{whiteSpace: 'pre-wrap'}} dangerouslySetInnerHTML={{__html: text}}/>);\n    }\n}\n","import React, {ReactElement} from 'react';\nimport './TaskItem.css'\nimport {Button, Popconfirm, Tooltip} from 'antd';\nimport {CheckOutlined, CloseOutlined, DeleteOutlined, EditOutlined} from '@ant-design/icons';\nimport {ShowUrls} from './ShowUrls';\n\ntype TaskItemState = {\n    showingConfirm: boolean,\n}\n\nexport type TaskItemProps = {\n    text: string;\n    active: boolean;\n    UUID: string;\n    onDone: any;\n    onEdit: any;\n    onDelete: any;\n    visibleConfirm: boolean;\n    clickableLinks: boolean;\n}\n\nexport class TaskItem extends React.Component<TaskItemProps, TaskItemState> {\n    getDoneButton(): ReactElement<typeof Tooltip> {\n        const markAsText = 'Mark as ' + ((this.props.active) ? 'completed' : 'active');\n        const icon = this.props.active ? <CheckOutlined/> : <CloseOutlined/>;\n        return (\n            <Tooltip title={markAsText}>\n                <Button\n                    onClick={this.props.onDone}\n                    icon={icon}\n                    style={{backgroundColor: '#70C040'}}\n                />\n            </Tooltip>\n        )\n    }\n\n    /// source: https://codesandbox.io/s/v3yo8\n    handleVisibleChange = (visible: boolean): void => {\n        if (!visible) {\n            this.setState({showingConfirm: visible});\n            return;\n        }\n\n        if (this.props.visibleConfirm) {\n            this.setState({showingConfirm: visible});\n        } else {\n            this.props.onDelete();\n        }\n    }\n\n    render(): ReactElement {\n        return (\n            <div className={`TaskItem-container ${this.props.active ? '' : 'TaskItem-dimmed'}`}>\n                <div className=\"TaskItem-controls button-group\">\n                    {this.getDoneButton()}\n                    <Tooltip title=\"Edit task\">\n                        <Button\n                            onClick={this.props.onEdit}\n                            icon={<EditOutlined/>}\n                            ghost\n                        />\n                    </Tooltip>\n                    <Popconfirm\n                        title=\"Are you sure you want to delete this task?\"\n                        okText=\"Yes\"\n                        cancelText=\"Nah\"\n                        onConfirm={this.props.onDelete}\n                        placement=\"bottom\"\n                        onVisibleChange={this.handleVisibleChange}\n                    >\n                        <Button\n                            icon={<DeleteOutlined/>}\n                            danger\n                        />\n                    </Popconfirm>\n                </div>\n                <div className=\"TaskItem-text\">\n                    <ShowUrls text={this.props.text} convertLinks={this.props.clickableLinks}/>\n                </div>\n            </div>\n        )\n    }\n}\n","export abstract class UTIL {\n    private static CREATED_YEAR = 2021;\n\n    /**\n     * Get the copyright date for the application\n     */\n    public static getCopyrightDate(): string {\n        const currentYear = new Date().getFullYear();\n        if (currentYear === this.CREATED_YEAR) {\n            /// if we are in the same year as the app was created, it will simply will just return that year\n            return this.CREATED_YEAR.toString();\n        } else {\n            /// otherwise a year interval\n            return `${Math.min(currentYear, this.CREATED_YEAR)}-${Math.max(currentYear, this.CREATED_YEAR)}`\n        }\n    }\n\n    public static randomHex(size: number = 6): string {\n        return (Math.random() * 0xffffff).toString(16).slice(0, size);\n    }\n}\n","import React from 'react';\n\ntype ContentContainerProps = {\n    maxWidth?: number;\n    centered?: boolean;\n    style?: React.CSSProperties;\n    className?: string;\n}\n\nconst defaults: ContentContainerProps = {\n    maxWidth: 1000,\n    centered: true,\n}\n\nexport class WidthLimitedContainer extends React.Component<ContentContainerProps, ContentContainerProps> {\n    constructor(props: ContentContainerProps) {\n        super(props);\n\n        this.state = {\n            ...this.props, ...defaults\n        }\n    }\n\n    render() {\n        return <div\n            style={{\n                maxWidth: this.state.maxWidth,\n                margin: this.state.centered ? '0 auto' : 'initial',\n                ...this.state.style,\n            }}\n            className={this.props.className}\n        > {this.props.children}</div>\n    }\n}\n","import React from 'react';\nimport {Button, Form, Input} from 'antd';\nimport {PlusOutlined} from '@ant-design/icons';\n\ntype TaskInputProps = {\n    onSubmit: (values: { taskName: string }) => void;\n    clearOnSubmit?: boolean;\n    initialValue?: string;\n}\n\nexport type TaskInputFormData = {\n    taskName: string;\n}\n\n/// Note that useForm is a React Hooks that only works in functional component.\nexport default function TaskInput(props: TaskInputProps) {\n    const [form] = Form.useForm<TaskInputFormData>();\n\n    /// Not the pretties solution, but it works\n    if (props.initialValue) {\n        setTimeout(() => {\n            form.setFieldsValue({taskName: props.initialValue});\n        }, 0);\n    }\n\n    return (\n        <Form\n            name=\"newTaskForm\"\n            preserve={false}\n            onFinish={data => {\n                if (props.clearOnSubmit) {\n                    form.resetFields();\n                }\n                props.onSubmit(data);\n            }}\n            form={form}\n        >\n            <Form.Item name=\"taskName\">\n                <Input.TextArea\n                    placeholder=\"Type task here...\"\n                    allowClear\n                    style={{width: 400}}\n                    autoSize={{minRows: 2}}\n                    showCount\n                    maxLength={2000}\n                    onPressEnter={(event: React.KeyboardEvent<HTMLTextAreaElement>) => {\n                        if (event.ctrlKey || event.shiftKey) {\n                            form.submit();\n                        }\n                    }}\n                />\n            </Form.Item>\n            <Form.Item>\n                <Button\n                    type=\"primary\"\n                    htmlType=\"submit\"\n                    icon={<PlusOutlined/>}\n                    style={{marginTop: '5px'}}\n                > Add </Button>\n            </Form.Item>\n        </Form>);\n}\n","import React, {ReactElement} from 'react';\nimport {Switch} from 'antd';\nimport {CheckOutlined, CloseOutlined} from '@ant-design/icons';\n\nexport type ISettings = {\n    showConfirmDialog: boolean;\n    showActiveTasksFirst: boolean;\n    showCompleted: boolean;\n    clickableLinks: boolean;\n}\n\nexport type SettingsProps = {\n    settings: ISettings;\n    onSettingUpdate: (newSettings: ISettings) => void;\n}\n\nexport class SettingsPage extends React.Component<SettingsProps, ISettings> {\n    constructor(props: SettingsProps) {\n        super(props);\n\n        this.state = {...this.props.settings}\n    }\n\n    createCustomSwitch(settingName: string): ReactElement<typeof Switch> {\n        if (Object.keys(this.state).filter(key => key === settingName).length === 0) {\n            throw Error(`Unknown setting key '${settingName}'. Did you misspell it?`);\n        }\n\n        const settings = this.props.settings;\n        return (\n            <Switch\n                onChange={(value: boolean) => this.updateSettings(settingName, value)}\n                /// key hack: https://stackoverflow.com/a/64217699\n                checked={settings[settingName as keyof ISettings]}\n                checkedChildren={<CheckOutlined/>}\n                unCheckedChildren={<CloseOutlined/>}\n            />\n        );\n    }\n\n    render() {\n        return (\n            <div>\n                <h3>Here you can change the behaviour of the application</h3>\n                <table className=\"settings\">\n                    <thead>\n                    <tr>\n                        <th>Action name</th>\n                        <th>Status</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n                    <tr>\n                        <td>Show confirm dialog when deleting</td>\n                        <td>\n                            {this.createCustomSwitch('showConfirmDialog')}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Show active tasks first</td>\n                        <td>\n                            {this.createCustomSwitch('showActiveTasksFirst')}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Show completed tasks</td>\n                        <td>\n                            {this.createCustomSwitch('showCompleted')}\n                        </td>\n                    </tr>\n                    <tr>\n                        <td>Make URLs clickable</td>\n                        <td>\n                            {this.createCustomSwitch('clickableLinks')}\n                        </td>\n                    </tr>\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n\n    private updateSettings(itemName: string, itemValue: boolean): void {\n        const settings = {...this.props.settings, [itemName]: itemValue};\n        this.props.onSettingUpdate(settings);\n    }\n}\n","import React, {ReactElement} from 'react';\nimport './App.css';\nimport {TaskItem} from './Components/TaskItem';\nimport {UTIL} from './Util';\nimport {Button, Layout, message, Popconfirm, Tabs} from 'antd';\nimport {ClearOutlined, HomeOutlined, SettingOutlined, ThunderboltOutlined} from '@ant-design/icons';\nimport {WidthLimitedContainer} from './Components/WidthLimitedContainer';\nimport {version} from '../package.json';\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport TaskInput, {TaskInputFormData} from './Components/TaskInput';\nimport {ISettings, SettingsPage} from './Pages/SettingsPage';\n\nconst {Header, Content, Footer} = Layout;\n\ntype TaskItemData = {\n    text: string;\n    UUID: string;\n    active: boolean;\n}\n\ntype AppState = {\n    taskInputValue: string;\n    taskListEntries: TaskItemData[];\n    settings: ISettings;\n}\n\nconst defaultSettings: ISettings = {\n    showConfirmDialog: true,\n    showActiveTasksFirst: false,\n    showCompleted: true,\n    clickableLinks: true,\n};\n\nclass App extends React.Component<any, AppState> {\n    constructor(props: any) {\n        super(props);\n\n        this.state = {\n            taskInputValue: '',\n            settings: {\n                ...defaultSettings,\n                ...JSON.parse(localStorage.getItem('settings') || JSON.stringify({}))\n            },\n            taskListEntries: []\n        };\n\n        message.config({\n            maxCount: 2,\n            duration: 3\n        });\n    }\n\n    /**\n     * Load data\n     */\n    componentDidMount(): void {\n        const tasks = JSON.parse(localStorage.getItem('tasks') || JSON.stringify([]));\n        this.setState({taskListEntries: tasks});\n    }\n\n    handleMarkAllDone(): void {\n        const tasks = this.state.taskListEntries.map((task: TaskItemData) => {\n            task.active = false;\n            return task;\n        });\n        this.updateTasks(tasks);\n        message.info('All tasks marked completed!').then(() => {\n        });\n    }\n\n    handleDeleteAllCompleted(): void {\n        const tasks = this.state.taskListEntries.filter((task: TaskItemData) => {\n            return task.active;\n        })\n        this.updateTasks(tasks);\n        message.info('Cleared completed tasks!').then(() => {\n        });\n    }\n\n    handleSubmit(submittedValues: TaskInputFormData): void {\n        const tasks = this.state.taskListEntries.slice();\n        const newTask = submittedValues.taskName;\n\n        if (!newTask) {\n            return;\n        }\n\n        tasks.push({\n            text: newTask,\n            UUID: Date.now().toString() + '_' + UTIL.randomHex(),\n            active: true,\n        });\n\n        this.setState({taskInputValue: ''});\n        this.updateTasks(tasks);\n        message.success('Task created!').then(() => {\n        });\n    }\n\n    handleDelete(task: TaskItemData): void {\n        const tasks = this.state.taskListEntries.slice();\n        const deletedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        if (deletedElIdx >= 0) {\n            tasks.splice(deletedElIdx, 1);\n            this.updateTasks(tasks);\n        }\n        message.info('Task deleted successfully').then(() => {\n        });\n    }\n\n    handleEdit(task: TaskItemData): void {\n        const tasks = this.state.taskListEntries.slice();\n        const deletedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        if (deletedElIdx >= 0) {\n            tasks.splice(deletedElIdx, 1);\n            this.setState({taskInputValue: task.text});\n            this.updateTasks(tasks);\n            scrollIntoView(\n                document.body.querySelector('.input-container') as Element,\n                {\n                    behavior: 'smooth',\n                    scrollMode: 'if-needed'\n                });\n        }\n    }\n\n    handleDone(task: TaskItemData): void {\n        const fromTopX = window.scrollX, fromTopY = window.scrollY;\n        const tasks = this.state.taskListEntries.slice();\n        const updatedElIdx = tasks.findIndex(el => task.UUID === el.UUID);\n        tasks[updatedElIdx] = {...tasks[updatedElIdx], active: !tasks[updatedElIdx].active};\n        this.updateTasks(tasks, () => {\n            window.scrollTo(fromTopX, fromTopY);\n        });\n    }\n\n    updateTasks(newTasks: TaskItemData[], callback?: (() => void)): void {\n        this.setState({taskListEntries: newTasks}, callback);\n        localStorage.setItem('tasks', JSON.stringify(newTasks));\n    }\n\n    updateSettings(newSettings: ISettings): void {\n        this.setState({\n            settings: newSettings\n        });\n        localStorage.setItem('settings', JSON.stringify(newSettings));\n        message.info('Settings updated!', 1).then(() => {\n        });\n    }\n\n    createTaskListEntry(item: TaskItemData): ReactElement<TaskItem> {\n        const settings = this.state.settings;\n        return (\n            <TaskItem\n                key={item.UUID}\n                text={item.text}\n                active={item.active}\n                UUID={item.UUID}\n                onDelete={() => this.handleDelete(item)}\n                onDone={() => this.handleDone(item)}\n                onEdit={() => this.handleEdit(item)}\n                visibleConfirm={settings.showConfirmDialog}\n                clickableLinks={settings.clickableLinks}\n            />\n        );\n    }\n\n    activeTaskCount(): number {\n        return this.state.taskListEntries.filter((task: TaskItemData) => {\n            return task.active;\n        }).length;\n    }\n\n    finishedTaskCount(): number {\n        return Math.max(this.state.taskListEntries.length - this.activeTaskCount(), 0);\n    }\n\n    render(): ReactElement {\n        let taskListItems;\n        if (this.state.taskListEntries) {\n            let tasks = this.state.taskListEntries;\n\n            if (!this.state.settings.showCompleted) {\n                tasks = tasks.filter(task => {\n                    return task.active;\n                });\n            } else if (this.state.settings.showActiveTasksFirst) {\n                let activeTasks: TaskItemData[] = [], completedTasks: TaskItemData[] = [];\n                tasks.forEach(task => {\n                    task.active ? activeTasks.push(task) : completedTasks.push(task);\n                });\n\n                tasks = activeTasks.concat(completedTasks);\n            }\n\n            taskListItems = tasks.map((item: TaskItemData) => {\n                return this.createTaskListEntry(item);\n            });\n        }\n\n        return (\n            <Layout style={{\n                minHeight: '100vh',\n            }}>\n                <Header style={{color: 'white'}}>\n                    <WidthLimitedContainer>JobTracker</WidthLimitedContainer>\n                </Header>\n                <Content className=\"content\">\n                    <WidthLimitedContainer className=\"content-container\">\n                        <Tabs defaultActiveKey=\"1\" type=\"card\">\n                            <Tabs.TabPane tab={<span><HomeOutlined/> Home</span>} key=\"1\">\n                                <div className=\"input-container\">\n                                    <TaskInput\n                                        onSubmit={this.handleSubmit.bind(this)}\n                                        clearOnSubmit={true}\n                                        initialValue={this.state.taskInputValue}\n                                    />\n                                </div>\n                                <hr/>\n                                <div className=\"button-group\">\n                                    <Button\n                                        onClick={this.handleMarkAllDone.bind(this)}\n                                        disabled={!this.activeTaskCount()}\n                                        icon={<ThunderboltOutlined/>}\n                                    > Mark all as completed </Button>\n                                    <Popconfirm\n                                        title=\"Are you sure? This cannot be undone.\"\n                                        okText=\"Yes\"\n                                        cancelText=\"Nah\"\n                                        onConfirm={this.handleDeleteAllCompleted.bind(this)}\n                                        placement=\"bottom\"\n                                        disabled={!this.finishedTaskCount()}\n                                    >\n                                        <Button\n                                            danger\n                                            disabled={!this.finishedTaskCount()}\n                                            icon={<ClearOutlined/>}\n                                        > Clear completed tasks </Button>\n                                    </Popconfirm>\n                                </div>\n                                <div className=\"App-task-container\">\n                                    {taskListItems}\n                                </div>\n                            </Tabs.TabPane>\n                            <Tabs.TabPane tab={<span><SettingOutlined/>Settings</span>} key=\"2\">\n                                <SettingsPage\n                                    settings={{...this.state.settings}}\n                                    onSettingUpdate={this.updateSettings.bind(this)}\n                                />\n                            </Tabs.TabPane>\n                        </Tabs>\n                    </WidthLimitedContainer>\n                </Content>\n                <Footer style={{\n                    textAlign: 'center',\n                    fontWeight: 'lighter',\n                    padding: 5,\n                }}>\n                    &copy; {UTIL.getCopyrightDate()} hubatruck |\n                    <a className=\"footer-link\" target=\"_blank\" rel=\"noreferrer\"\n                       href=\"https://github.com/hubatruck/jobtracker\">\n                        &nbsp;View project on GitHub&nbsp;\n                    </a>\n                    | build: {process.env.REACT_APP_GIT_SHA}_v{version}\n                </Footer>\n            </Layout>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.dark.css'\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}